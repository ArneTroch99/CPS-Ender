
CPS-Ender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000005e2  00000676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800202  00800202  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a53  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129c  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aee  00000000  00000000  00003537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00004028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087d  00000000  00000000  00004314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071a  00000000  00000000  00004b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000052ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	9e c0       	rjmp	.+316    	; 0x182 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ee       	ldi	r30, 0xE2	; 226
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 33       	cpi	r26, 0x30	; 48
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	19 d0       	rcall	.+50     	; 0x152 <main>
 120:	5e c2       	rjmp	.+1212   	; 0x5de <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer>:
}


void initTimer(){
	// Make sure timer/counter0 is enabled
	PRR0 |= 1 << 2;
 124:	e4 e6       	ldi	r30, 0x64	; 100
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	80 83       	st	Z, r24
	// Enable bit set on compare
	TCCR1A = 0b11000100;
 12e:	84 ec       	ldi	r24, 0xC4	; 196
 130:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	// Enable 1024 prescaler
	TCCR1B = 0b1101;
 134:	8d e0       	ldi	r24, 0x0D	; 13
 136:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	// Set the compare registers
	OCR1A = 0b0011110100001001;
 13a:	89 e0       	ldi	r24, 0x09	; 9
 13c:	9d e3       	ldi	r25, 0x3D	; 61
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	// Enable the interrupt
	TIMSK1 |= 1 << 1;
 146:	ef e6       	ldi	r30, 0x6F	; 111
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <main>:
}


int_T main(int_T argc, const char *argv[])
{
	aan = false;
 152:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <aan+0x1>
 156:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <aan>
	DDRA |= 0b00000001;
 15a:	08 9a       	sbi	0x01, 0	; 1

	initTimer();
 15c:	e3 df       	rcall	.-58     	; 0x124 <initTimer>
	sei();
 15e:	78 94       	sei
	initUSART(MYUBRR);
 160:	87 e6       	ldi	r24, 0x67	; 103
 162:	90 e0       	ldi	r25, 0x00	; 0
	initHotend();
 164:	eb d0       	rcall	.+470    	; 0x33c <initUSART>
 166:	6a d0       	rcall	.+212    	; 0x23c <initHotend>
	/* Unused arguments */
	(void)(argc);
	(void)(argv);

	/* Initialize model */
	PID_initialize();
 168:	8f d0       	rcall	.+286    	; 0x288 <PID_initialize>
 16a:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <PID_M>
	 * call syntax for rt_OneStep is
	 *
	 *  rt_OneStep();
	*/
	fflush((NULL));
	while (rtmGetErrorStatus(PID_M) == (NULL)) {
 16e:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <PID_M+0x1>
 172:	80 81       	ld	r24, Z
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	89 2b       	or	r24, r25
 178:	e1 f3       	breq	.-8      	; 0x172 <main+0x20>
	}

	/* Disable rt_OneStep() here */

	/* Terminate model */
	PID_terminate();
 17a:	8a d0       	rcall	.+276    	; 0x290 <PID_terminate>
 17c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret

00000182 <__vector_17>:
 182:	1f 92       	push	r1
	OCR1A = 0b0011110100001001;
	// Enable the interrupt
	TIMSK1 |= 1 << 1;
}

ISR(TIMER1_COMPA_vect){
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0b b6       	in	r0, 0x3b	; 59
 18e:	0f 92       	push	r0
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	if (aan == false){
 1a8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <aan>
 1ac:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <aan+0x1>
 1b0:	89 2b       	or	r24, r25
 1b2:	41 f4       	brne	.+16     	; 0x1c4 <__vector_17+0x42>
		PORTA |= 0b00000001;
 1b4:	10 9a       	sbi	0x02, 0	; 2
		aan = true;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <aan+0x1>
 1be:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <aan>
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <__vector_17+0x4c>
	} else {
		PORTA &= 0b11111110;
 1c4:	10 98       	cbi	0x02, 0	; 2
		aan = false;
 1c6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <aan+0x1>
 1ca:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <aan>
	}	
	TIFR1 |= 0b00000010;
 1ce:	b1 9a       	sbi	0x16, 1	; 22
	//char* strB = "Ne seconde";
	//usart_pstr(strB);
	if (pwm == 40){
 1d0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1d4:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 1d8:	88 97       	sbiw	r24, 0x28	; 40
 1da:	21 f4       	brne	.+8      	; 0x1e4 <__vector_17+0x62>
		pwm = 0;
 1dc:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
 1e0:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
	}
	pwm += 1;
 1e4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1e8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 1f2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	setHotend(pwm);
 1f6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1fa:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 1fe:	2a d0       	rcall	.+84     	; 0x254 <setHotend>
	if (pwm%5==0){
 200:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 204:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 208:	65 e0       	ldi	r22, 0x05	; 5
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	c1 d1       	rcall	.+898    	; 0x590 <__divmodhi4>
 20e:	89 2b       	or	r24, r25
 210:	11 f4       	brne	.+4      	; 0x216 <__vector_17+0x94>
		usart_putchar('a');
 212:	81 e6       	ldi	r24, 0x61	; 97
 214:	98 d0       	rcall	.+304    	; 0x346 <usart_putchar>
 216:	ff 91       	pop	r31
	}
}
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0b be       	out	0x3b, r0	; 59
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <initHotend>:

#include "Hotend.h"

void initHotend(){
	//set PB4 as an output
	DDRB |=  (1<<PB4);
 23c:	24 9a       	sbi	0x04, 4	; 4
	
	//set fast PWM mode and set non-inverting mode
	TCCR2A |= (1<<WGM20)|(1<<WGM21)|(1<<COM2A1);
 23e:	e0 eb       	ldi	r30, 0xB0	; 176
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	83 68       	ori	r24, 0x83	; 131
 246:	80 83       	st	Z, r24
	
	//prescaler of 1024
	TCCR2B |= (1<<WGM22)|(1<<CS22)|(1<<CS21)|(1<<CS20);
 248:	e1 eb       	ldi	r30, 0xB1	; 177
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8f 60       	ori	r24, 0x0F	; 15
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <setHotend>:
		
}

void setHotend(int value){
	//see if the value is valid
	if(value < 40 & value > 0){
 254:	9c 01       	movw	r18, r24
 256:	21 50       	subi	r18, 0x01	; 1
 258:	31 09       	sbc	r19, r1
 25a:	27 32       	cpi	r18, 0x27	; 39
 25c:	31 05       	cpc	r19, r1
 25e:	88 f4       	brcc	.+34     	; 0x282 <setHotend+0x2e>
		
		//calculate the duty cycle
		float duty = value/40;
		uint8_t duty8bit = duty * 256;
 260:	68 e2       	ldi	r22, 0x28	; 40
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	95 d1       	rcall	.+810    	; 0x590 <__divmodhi4>
 266:	07 2e       	mov	r0, r23
 268:	00 0c       	add	r0, r0
 26a:	88 0b       	sbc	r24, r24
 26c:	99 0b       	sbc	r25, r25
 26e:	a1 d0       	rcall	.+322    	; 0x3b2 <__floatsisf>
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e8       	ldi	r20, 0x80	; 128
 276:	53 e4       	ldi	r21, 0x43	; 67
 278:	28 d1       	rcall	.+592    	; 0x4ca <__mulsf3>
 27a:	6d d0       	rcall	.+218    	; 0x356 <__fixunssfsi>
		
		//set the duty cycle
		OCR2A = duty8bit;
 27c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 280:	08 95       	ret
		
		} else {
		//invalid value -> turn off the hotend
		OCR2A = 0;
 282:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 286:	08 95       	ret

00000288 <PID_initialize>:
void PID_initialize(void)
{
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	20 c0       	rjmp	.+64     	; 0x2ce <rt_InitInfAndNaN>
 28e:	08 95       	ret

00000290 <PID_terminate>:
}

/* Model terminate function */
void PID_terminate(void)
{
 290:	08 95       	ret

00000292 <rtGetInf>:
    tmpVal.bitVal.words.wordL = 0x00000000U;
    inf = tmpVal.fltVal;
  }

  return inf;
}
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	9f e7       	ldi	r25, 0x7F	; 127
 29a:	08 95       	ret

0000029c <rtGetInfF>:
real32_T rtGetInfF(void)
{
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
  return infF.wordL.wordLreal;
}
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	9f e7       	ldi	r25, 0x7F	; 127
 2a4:	08 95       	ret

000002a6 <rtGetMinusInf>:
    tmpVal.bitVal.words.wordL = 0x00000000U;
    minf = tmpVal.fltVal;
  }

  return minf;
}
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	80 e8       	ldi	r24, 0x80	; 128
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	08 95       	ret

000002b0 <rtGetMinusInfF>:
real32_T rtGetMinusInfF(void)
{
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
  return minfF.wordL.wordLreal;
}
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	9f ef       	ldi	r25, 0xFF	; 255
 2b8:	08 95       	ret

000002ba <rtGetNaN>:
    tmpVal.bitVal.words.wordL = 0x00000000U;
    nan = tmpVal.fltVal;
  }

  return nan;
}
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	80 ec       	ldi	r24, 0xC0	; 192
 2c0:	9f ef       	ldi	r25, 0xFF	; 255
 2c2:	08 95       	ret

000002c4 <rtGetNaNF>:
{
  IEEESingle nanF = { { 0 } };

  nanF.wordL.wordLuint = 0xFFC00000U;
  return nanF.wordL.wordLreal;
}
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	80 ec       	ldi	r24, 0xC0	; 192
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	08 95       	ret

000002ce <rt_InitInfAndNaN>:
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
  (void) (realSize);
  rtNaN = rtGetNaN();
 2ce:	f5 df       	rcall	.-22     	; 0x2ba <rtGetNaN>
 2d0:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <rtNaN>
 2d4:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <rtNaN+0x1>
 2d8:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <rtNaN+0x2>
 2dc:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <rtNaN+0x3>
  rtNaNF = rtGetNaNF();
 2e0:	f1 df       	rcall	.-30     	; 0x2c4 <rtGetNaNF>
 2e2:	60 93 18 02 	sts	0x0218, r22	; 0x800218 <rtNaNF>
 2e6:	70 93 19 02 	sts	0x0219, r23	; 0x800219 <rtNaNF+0x1>
 2ea:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <rtNaNF+0x2>
 2ee:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <rtNaNF+0x3>
  rtInf = rtGetInf();
 2f2:	cf df       	rcall	.-98     	; 0x292 <rtGetInf>
 2f4:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <rtInf>
 2f8:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <rtInf+0x1>
 2fc:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <rtInf+0x2>
 300:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <rtInf+0x3>
  rtInfF = rtGetInfF();
 304:	cb df       	rcall	.-106    	; 0x29c <rtGetInfF>
 306:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <rtInfF>
 30a:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <rtInfF+0x1>
 30e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <rtInfF+0x2>
 312:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <rtInfF+0x3>
  rtMinusInf = rtGetMinusInf();
 316:	c7 df       	rcall	.-114    	; 0x2a6 <rtGetMinusInf>
 318:	60 93 28 02 	sts	0x0228, r22	; 0x800228 <rtMinusInf>
 31c:	70 93 29 02 	sts	0x0229, r23	; 0x800229 <rtMinusInf+0x1>
 320:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <rtMinusInf+0x2>
 324:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <rtMinusInf+0x3>
  rtMinusInfF = rtGetMinusInfF();
 328:	c3 df       	rcall	.-122    	; 0x2b0 <rtGetMinusInfF>
 32a:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <rtMinusInfF>
 32e:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <rtMinusInfF+0x1>
 332:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <rtMinusInfF+0x2>
 336:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <rtMinusInfF+0x3>
 33a:	08 95       	ret

0000033c <initUSART>:
 */ 

#include "UART.h"

void initUSART(uint16_t ubrr){
	UBRR0H = (uint8_t)(ubrr>>8);
 33c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (uint8_t)(ubrr);
 340:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 344:	08 95       	ret

00000346 <usart_putchar>:
}

void usart_putchar(char data){
	/*wait for empty transmit buffer*/
	while(!((UCSR0A)& (_BV(UDRE0))));
 346:	e0 ec       	ldi	r30, 0xC0	; 192
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	90 81       	ld	r25, Z
 34c:	95 ff       	sbrs	r25, 5
 34e:	fd cf       	rjmp	.-6      	; 0x34a <usart_putchar+0x4>
	UDR0 = data;
 350:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 354:	08 95       	ret

00000356 <__fixunssfsi>:
 356:	98 d0       	rcall	.+304    	; 0x488 <__fp_splitA>
 358:	88 f0       	brcs	.+34     	; 0x37c <__fixunssfsi+0x26>
 35a:	9f 57       	subi	r25, 0x7F	; 127
 35c:	90 f0       	brcs	.+36     	; 0x382 <__fixunssfsi+0x2c>
 35e:	b9 2f       	mov	r27, r25
 360:	99 27       	eor	r25, r25
 362:	b7 51       	subi	r27, 0x17	; 23
 364:	a0 f0       	brcs	.+40     	; 0x38e <__fixunssfsi+0x38>
 366:	d1 f0       	breq	.+52     	; 0x39c <__fixunssfsi+0x46>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	88 1f       	adc	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	1a f0       	brmi	.+6      	; 0x378 <__fixunssfsi+0x22>
 372:	ba 95       	dec	r27
 374:	c9 f7       	brne	.-14     	; 0x368 <__fixunssfsi+0x12>
 376:	12 c0       	rjmp	.+36     	; 0x39c <__fixunssfsi+0x46>
 378:	b1 30       	cpi	r27, 0x01	; 1
 37a:	81 f0       	breq	.+32     	; 0x39c <__fixunssfsi+0x46>
 37c:	9f d0       	rcall	.+318    	; 0x4bc <__fp_zero>
 37e:	b1 e0       	ldi	r27, 0x01	; 1
 380:	08 95       	ret
 382:	9c c0       	rjmp	.+312    	; 0x4bc <__fp_zero>
 384:	67 2f       	mov	r22, r23
 386:	78 2f       	mov	r23, r24
 388:	88 27       	eor	r24, r24
 38a:	b8 5f       	subi	r27, 0xF8	; 248
 38c:	39 f0       	breq	.+14     	; 0x39c <__fixunssfsi+0x46>
 38e:	b9 3f       	cpi	r27, 0xF9	; 249
 390:	cc f3       	brlt	.-14     	; 0x384 <__fixunssfsi+0x2e>
 392:	86 95       	lsr	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	b3 95       	inc	r27
 39a:	d9 f7       	brne	.-10     	; 0x392 <__fixunssfsi+0x3c>
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__fixunssfsi+0x56>
 39e:	90 95       	com	r25
 3a0:	80 95       	com	r24
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	08 95       	ret

000003ae <__floatunsisf>:
 3ae:	e8 94       	clt
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <__floatsisf+0x12>

000003b2 <__floatsisf>:
 3b2:	97 fb       	bst	r25, 7
 3b4:	3e f4       	brtc	.+14     	; 0x3c4 <__floatsisf+0x12>
 3b6:	90 95       	com	r25
 3b8:	80 95       	com	r24
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	99 23       	and	r25, r25
 3c6:	a9 f0       	breq	.+42     	; 0x3f2 <__floatsisf+0x40>
 3c8:	f9 2f       	mov	r31, r25
 3ca:	96 e9       	ldi	r25, 0x96	; 150
 3cc:	bb 27       	eor	r27, r27
 3ce:	93 95       	inc	r25
 3d0:	f6 95       	lsr	r31
 3d2:	87 95       	ror	r24
 3d4:	77 95       	ror	r23
 3d6:	67 95       	ror	r22
 3d8:	b7 95       	ror	r27
 3da:	f1 11       	cpse	r31, r1
 3dc:	f8 cf       	rjmp	.-16     	; 0x3ce <__floatsisf+0x1c>
 3de:	fa f4       	brpl	.+62     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e0:	bb 0f       	add	r27, r27
 3e2:	11 f4       	brne	.+4      	; 0x3e8 <__floatsisf+0x36>
 3e4:	60 ff       	sbrs	r22, 0
 3e6:	1b c0       	rjmp	.+54     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	8f 4f       	sbci	r24, 0xFF	; 255
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	16 c0       	rjmp	.+44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f2:	88 23       	and	r24, r24
 3f4:	11 f0       	breq	.+4      	; 0x3fa <__floatsisf+0x48>
 3f6:	96 e9       	ldi	r25, 0x96	; 150
 3f8:	11 c0       	rjmp	.+34     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fa:	77 23       	and	r23, r23
 3fc:	21 f0       	breq	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	9e e8       	ldi	r25, 0x8E	; 142
 400:	87 2f       	mov	r24, r23
 402:	76 2f       	mov	r23, r22
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	66 23       	and	r22, r22
 408:	71 f0       	breq	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40a:	96 e8       	ldi	r25, 0x86	; 134
 40c:	86 2f       	mov	r24, r22
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	2a f0       	brmi	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 414:	9a 95       	dec	r25
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	da f7       	brpl	.-10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41e:	88 0f       	add	r24, r24
 420:	96 95       	lsr	r25
 422:	87 95       	ror	r24
 424:	97 f9       	bld	r25, 7
 426:	08 95       	ret

00000428 <__fp_inf>:
 428:	97 f9       	bld	r25, 7
 42a:	9f 67       	ori	r25, 0x7F	; 127
 42c:	80 e8       	ldi	r24, 0x80	; 128
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	08 95       	ret

00000434 <__fp_nan>:
 434:	9f ef       	ldi	r25, 0xFF	; 255
 436:	80 ec       	ldi	r24, 0xC0	; 192
 438:	08 95       	ret

0000043a <__fp_pscA>:
 43a:	00 24       	eor	r0, r0
 43c:	0a 94       	dec	r0
 43e:	16 16       	cp	r1, r22
 440:	17 06       	cpc	r1, r23
 442:	18 06       	cpc	r1, r24
 444:	09 06       	cpc	r0, r25
 446:	08 95       	ret

00000448 <__fp_pscB>:
 448:	00 24       	eor	r0, r0
 44a:	0a 94       	dec	r0
 44c:	12 16       	cp	r1, r18
 44e:	13 06       	cpc	r1, r19
 450:	14 06       	cpc	r1, r20
 452:	05 06       	cpc	r0, r21
 454:	08 95       	ret

00000456 <__fp_round>:
 456:	09 2e       	mov	r0, r25
 458:	03 94       	inc	r0
 45a:	00 0c       	add	r0, r0
 45c:	11 f4       	brne	.+4      	; 0x462 <__fp_round+0xc>
 45e:	88 23       	and	r24, r24
 460:	52 f0       	brmi	.+20     	; 0x476 <__fp_round+0x20>
 462:	bb 0f       	add	r27, r27
 464:	40 f4       	brcc	.+16     	; 0x476 <__fp_round+0x20>
 466:	bf 2b       	or	r27, r31
 468:	11 f4       	brne	.+4      	; 0x46e <__fp_round+0x18>
 46a:	60 ff       	sbrs	r22, 0
 46c:	04 c0       	rjmp	.+8      	; 0x476 <__fp_round+0x20>
 46e:	6f 5f       	subi	r22, 0xFF	; 255
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	08 95       	ret

00000478 <__fp_split3>:
 478:	57 fd       	sbrc	r21, 7
 47a:	90 58       	subi	r25, 0x80	; 128
 47c:	44 0f       	add	r20, r20
 47e:	55 1f       	adc	r21, r21
 480:	59 f0       	breq	.+22     	; 0x498 <__fp_splitA+0x10>
 482:	5f 3f       	cpi	r21, 0xFF	; 255
 484:	71 f0       	breq	.+28     	; 0x4a2 <__fp_splitA+0x1a>
 486:	47 95       	ror	r20

00000488 <__fp_splitA>:
 488:	88 0f       	add	r24, r24
 48a:	97 fb       	bst	r25, 7
 48c:	99 1f       	adc	r25, r25
 48e:	61 f0       	breq	.+24     	; 0x4a8 <__fp_splitA+0x20>
 490:	9f 3f       	cpi	r25, 0xFF	; 255
 492:	79 f0       	breq	.+30     	; 0x4b2 <__fp_splitA+0x2a>
 494:	87 95       	ror	r24
 496:	08 95       	ret
 498:	12 16       	cp	r1, r18
 49a:	13 06       	cpc	r1, r19
 49c:	14 06       	cpc	r1, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	f2 cf       	rjmp	.-28     	; 0x486 <__fp_split3+0xe>
 4a2:	46 95       	lsr	r20
 4a4:	f1 df       	rcall	.-30     	; 0x488 <__fp_splitA>
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <__fp_splitA+0x30>
 4a8:	16 16       	cp	r1, r22
 4aa:	17 06       	cpc	r1, r23
 4ac:	18 06       	cpc	r1, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	f1 cf       	rjmp	.-30     	; 0x494 <__fp_splitA+0xc>
 4b2:	86 95       	lsr	r24
 4b4:	71 05       	cpc	r23, r1
 4b6:	61 05       	cpc	r22, r1
 4b8:	08 94       	sec
 4ba:	08 95       	ret

000004bc <__fp_zero>:
 4bc:	e8 94       	clt

000004be <__fp_szero>:
 4be:	bb 27       	eor	r27, r27
 4c0:	66 27       	eor	r22, r22
 4c2:	77 27       	eor	r23, r23
 4c4:	cb 01       	movw	r24, r22
 4c6:	97 f9       	bld	r25, 7
 4c8:	08 95       	ret

000004ca <__mulsf3>:
 4ca:	0b d0       	rcall	.+22     	; 0x4e2 <__mulsf3x>
 4cc:	c4 cf       	rjmp	.-120    	; 0x456 <__fp_round>
 4ce:	b5 df       	rcall	.-150    	; 0x43a <__fp_pscA>
 4d0:	28 f0       	brcs	.+10     	; 0x4dc <__mulsf3+0x12>
 4d2:	ba df       	rcall	.-140    	; 0x448 <__fp_pscB>
 4d4:	18 f0       	brcs	.+6      	; 0x4dc <__mulsf3+0x12>
 4d6:	95 23       	and	r25, r21
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__mulsf3+0x12>
 4da:	a6 cf       	rjmp	.-180    	; 0x428 <__fp_inf>
 4dc:	ab cf       	rjmp	.-170    	; 0x434 <__fp_nan>
 4de:	11 24       	eor	r1, r1
 4e0:	ee cf       	rjmp	.-36     	; 0x4be <__fp_szero>

000004e2 <__mulsf3x>:
 4e2:	ca df       	rcall	.-108    	; 0x478 <__fp_split3>
 4e4:	a0 f3       	brcs	.-24     	; 0x4ce <__mulsf3+0x4>

000004e6 <__mulsf3_pse>:
 4e6:	95 9f       	mul	r25, r21
 4e8:	d1 f3       	breq	.-12     	; 0x4de <__mulsf3+0x14>
 4ea:	95 0f       	add	r25, r21
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	55 1f       	adc	r21, r21
 4f0:	62 9f       	mul	r22, r18
 4f2:	f0 01       	movw	r30, r0
 4f4:	72 9f       	mul	r23, r18
 4f6:	bb 27       	eor	r27, r27
 4f8:	f0 0d       	add	r31, r0
 4fa:	b1 1d       	adc	r27, r1
 4fc:	63 9f       	mul	r22, r19
 4fe:	aa 27       	eor	r26, r26
 500:	f0 0d       	add	r31, r0
 502:	b1 1d       	adc	r27, r1
 504:	aa 1f       	adc	r26, r26
 506:	64 9f       	mul	r22, r20
 508:	66 27       	eor	r22, r22
 50a:	b0 0d       	add	r27, r0
 50c:	a1 1d       	adc	r26, r1
 50e:	66 1f       	adc	r22, r22
 510:	82 9f       	mul	r24, r18
 512:	22 27       	eor	r18, r18
 514:	b0 0d       	add	r27, r0
 516:	a1 1d       	adc	r26, r1
 518:	62 1f       	adc	r22, r18
 51a:	73 9f       	mul	r23, r19
 51c:	b0 0d       	add	r27, r0
 51e:	a1 1d       	adc	r26, r1
 520:	62 1f       	adc	r22, r18
 522:	83 9f       	mul	r24, r19
 524:	a0 0d       	add	r26, r0
 526:	61 1d       	adc	r22, r1
 528:	22 1f       	adc	r18, r18
 52a:	74 9f       	mul	r23, r20
 52c:	33 27       	eor	r19, r19
 52e:	a0 0d       	add	r26, r0
 530:	61 1d       	adc	r22, r1
 532:	23 1f       	adc	r18, r19
 534:	84 9f       	mul	r24, r20
 536:	60 0d       	add	r22, r0
 538:	21 1d       	adc	r18, r1
 53a:	82 2f       	mov	r24, r18
 53c:	76 2f       	mov	r23, r22
 53e:	6a 2f       	mov	r22, r26
 540:	11 24       	eor	r1, r1
 542:	9f 57       	subi	r25, 0x7F	; 127
 544:	50 40       	sbci	r21, 0x00	; 0
 546:	8a f0       	brmi	.+34     	; 0x56a <__mulsf3_pse+0x84>
 548:	e1 f0       	breq	.+56     	; 0x582 <__mulsf3_pse+0x9c>
 54a:	88 23       	and	r24, r24
 54c:	4a f0       	brmi	.+18     	; 0x560 <__mulsf3_pse+0x7a>
 54e:	ee 0f       	add	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	bb 1f       	adc	r27, r27
 554:	66 1f       	adc	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	91 50       	subi	r25, 0x01	; 1
 55c:	50 40       	sbci	r21, 0x00	; 0
 55e:	a9 f7       	brne	.-22     	; 0x54a <__mulsf3_pse+0x64>
 560:	9e 3f       	cpi	r25, 0xFE	; 254
 562:	51 05       	cpc	r21, r1
 564:	70 f0       	brcs	.+28     	; 0x582 <__mulsf3_pse+0x9c>
 566:	60 cf       	rjmp	.-320    	; 0x428 <__fp_inf>
 568:	aa cf       	rjmp	.-172    	; 0x4be <__fp_szero>
 56a:	5f 3f       	cpi	r21, 0xFF	; 255
 56c:	ec f3       	brlt	.-6      	; 0x568 <__mulsf3_pse+0x82>
 56e:	98 3e       	cpi	r25, 0xE8	; 232
 570:	dc f3       	brlt	.-10     	; 0x568 <__mulsf3_pse+0x82>
 572:	86 95       	lsr	r24
 574:	77 95       	ror	r23
 576:	67 95       	ror	r22
 578:	b7 95       	ror	r27
 57a:	f7 95       	ror	r31
 57c:	e7 95       	ror	r30
 57e:	9f 5f       	subi	r25, 0xFF	; 255
 580:	c1 f7       	brne	.-16     	; 0x572 <__mulsf3_pse+0x8c>
 582:	fe 2b       	or	r31, r30
 584:	88 0f       	add	r24, r24
 586:	91 1d       	adc	r25, r1
 588:	96 95       	lsr	r25
 58a:	87 95       	ror	r24
 58c:	97 f9       	bld	r25, 7
 58e:	08 95       	ret

00000590 <__divmodhi4>:
 590:	97 fb       	bst	r25, 7
 592:	07 2e       	mov	r0, r23
 594:	16 f4       	brtc	.+4      	; 0x59a <__divmodhi4+0xa>
 596:	00 94       	com	r0
 598:	06 d0       	rcall	.+12     	; 0x5a6 <__divmodhi4_neg1>
 59a:	77 fd       	sbrc	r23, 7
 59c:	08 d0       	rcall	.+16     	; 0x5ae <__divmodhi4_neg2>
 59e:	0b d0       	rcall	.+22     	; 0x5b6 <__udivmodhi4>
 5a0:	07 fc       	sbrc	r0, 7
 5a2:	05 d0       	rcall	.+10     	; 0x5ae <__divmodhi4_neg2>
 5a4:	3e f4       	brtc	.+14     	; 0x5b4 <__divmodhi4_exit>

000005a6 <__divmodhi4_neg1>:
 5a6:	90 95       	com	r25
 5a8:	81 95       	neg	r24
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	08 95       	ret

000005ae <__divmodhi4_neg2>:
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255

000005b4 <__divmodhi4_exit>:
 5b4:	08 95       	ret

000005b6 <__udivmodhi4>:
 5b6:	aa 1b       	sub	r26, r26
 5b8:	bb 1b       	sub	r27, r27
 5ba:	51 e1       	ldi	r21, 0x11	; 17
 5bc:	07 c0       	rjmp	.+14     	; 0x5cc <__udivmodhi4_ep>

000005be <__udivmodhi4_loop>:
 5be:	aa 1f       	adc	r26, r26
 5c0:	bb 1f       	adc	r27, r27
 5c2:	a6 17       	cp	r26, r22
 5c4:	b7 07       	cpc	r27, r23
 5c6:	10 f0       	brcs	.+4      	; 0x5cc <__udivmodhi4_ep>
 5c8:	a6 1b       	sub	r26, r22
 5ca:	b7 0b       	sbc	r27, r23

000005cc <__udivmodhi4_ep>:
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	5a 95       	dec	r21
 5d2:	a9 f7       	brne	.-22     	; 0x5be <__udivmodhi4_loop>
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	bc 01       	movw	r22, r24
 5da:	cd 01       	movw	r24, r26
 5dc:	08 95       	ret

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
